// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2024 23:26:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    text
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module text_vlg_sample_tst(
	clk_in,
	sampler_tx
);
input  clk_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module text_vlg_check_tst (
	ledG1,
	ledg2,
	ledR1,
	ledr2,
	ledY1,
	ledy2,
	s1,
	s2,
	s4,
	s5,
	s6,
	SEG1,
	SEG2,
	SEG3,
	SEG4,
	SEG5,
	SEG6,
	SEG7,
	sampler_rx
);
input  ledG1;
input  ledg2;
input  ledR1;
input  ledr2;
input  ledY1;
input  ledy2;
input  s1;
input  s2;
input  s4;
input  s5;
input  s6;
input  SEG1;
input  SEG2;
input  SEG3;
input  SEG4;
input  SEG5;
input  SEG6;
input  SEG7;
input sampler_rx;

reg  ledG1_expected;
reg  ledg2_expected;
reg  ledR1_expected;
reg  ledr2_expected;
reg  ledY1_expected;
reg  ledy2_expected;
reg  s1_expected;
reg  s2_expected;
reg  s4_expected;
reg  s5_expected;
reg  s6_expected;
reg  SEG1_expected;
reg  SEG2_expected;
reg  SEG3_expected;
reg  SEG4_expected;
reg  SEG5_expected;
reg  SEG6_expected;
reg  SEG7_expected;

reg  ledG1_prev;
reg  ledg2_prev;
reg  ledR1_prev;
reg  ledr2_prev;
reg  ledY1_prev;
reg  ledy2_prev;
reg  s1_prev;
reg  s2_prev;
reg  s4_prev;
reg  s5_prev;
reg  s6_prev;
reg  SEG1_prev;
reg  SEG2_prev;
reg  SEG3_prev;
reg  SEG4_prev;
reg  SEG5_prev;
reg  SEG6_prev;
reg  SEG7_prev;

reg  ledG1_expected_prev;
reg  ledg2_expected_prev;
reg  ledR1_expected_prev;
reg  ledr2_expected_prev;
reg  ledY1_expected_prev;
reg  ledy2_expected_prev;
reg  s1_expected_prev;
reg  s2_expected_prev;
reg  s4_expected_prev;
reg  s5_expected_prev;
reg  s6_expected_prev;
reg  SEG1_expected_prev;
reg  SEG2_expected_prev;
reg  SEG3_expected_prev;
reg  SEG4_expected_prev;
reg  SEG5_expected_prev;
reg  SEG6_expected_prev;
reg  SEG7_expected_prev;

reg  last_ledG1_exp;
reg  last_ledg2_exp;
reg  last_ledR1_exp;
reg  last_ledr2_exp;
reg  last_ledY1_exp;
reg  last_ledy2_exp;
reg  last_s1_exp;
reg  last_s2_exp;
reg  last_s4_exp;
reg  last_s5_exp;
reg  last_s6_exp;
reg  last_SEG1_exp;
reg  last_SEG2_exp;
reg  last_SEG3_exp;
reg  last_SEG4_exp;
reg  last_SEG5_exp;
reg  last_SEG6_exp;
reg  last_SEG7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	ledG1_prev = ledG1;
	ledg2_prev = ledg2;
	ledR1_prev = ledR1;
	ledr2_prev = ledr2;
	ledY1_prev = ledY1;
	ledy2_prev = ledy2;
	s1_prev = s1;
	s2_prev = s2;
	s4_prev = s4;
	s5_prev = s5;
	s6_prev = s6;
	SEG1_prev = SEG1;
	SEG2_prev = SEG2;
	SEG3_prev = SEG3;
	SEG4_prev = SEG4;
	SEG5_prev = SEG5;
	SEG6_prev = SEG6;
	SEG7_prev = SEG7;
end

// update expected /o prevs

always @(trigger)
begin
	ledG1_expected_prev = ledG1_expected;
	ledg2_expected_prev = ledg2_expected;
	ledR1_expected_prev = ledR1_expected;
	ledr2_expected_prev = ledr2_expected;
	ledY1_expected_prev = ledY1_expected;
	ledy2_expected_prev = ledy2_expected;
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
	s4_expected_prev = s4_expected;
	s5_expected_prev = s5_expected;
	s6_expected_prev = s6_expected;
	SEG1_expected_prev = SEG1_expected;
	SEG2_expected_prev = SEG2_expected;
	SEG3_expected_prev = SEG3_expected;
	SEG4_expected_prev = SEG4_expected;
	SEG5_expected_prev = SEG5_expected;
	SEG6_expected_prev = SEG6_expected;
	SEG7_expected_prev = SEG7_expected;
end



// expected ledG1
initial
begin
	ledG1_expected = 1'bX;
end 

// expected ledg2
initial
begin
	ledg2_expected = 1'bX;
end 

// expected ledR1
initial
begin
	ledR1_expected = 1'bX;
end 

// expected ledr2
initial
begin
	ledr2_expected = 1'bX;
end 

// expected ledY1
initial
begin
	ledY1_expected = 1'bX;
end 

// expected ledy2
initial
begin
	ledy2_expected = 1'bX;
end 

// expected s1
initial
begin
	s1_expected = 1'bX;
end 

// expected s2
initial
begin
	s2_expected = 1'bX;
end 

// expected s4
initial
begin
	s4_expected = 1'bX;
end 

// expected s5
initial
begin
	s5_expected = 1'bX;
end 

// expected s6
initial
begin
	s6_expected = 1'bX;
end 

// expected SEG1
initial
begin
	SEG1_expected = 1'bX;
end 

// expected SEG2
initial
begin
	SEG2_expected = 1'bX;
end 

// expected SEG3
initial
begin
	SEG3_expected = 1'bX;
end 

// expected SEG4
initial
begin
	SEG4_expected = 1'bX;
end 

// expected SEG5
initial
begin
	SEG5_expected = 1'bX;
end 

// expected SEG6
initial
begin
	SEG6_expected = 1'bX;
end 

// expected SEG7
initial
begin
	SEG7_expected = 1'bX;
end 
// generate trigger
always @(ledG1_expected or ledG1 or ledg2_expected or ledg2 or ledR1_expected or ledR1 or ledr2_expected or ledr2 or ledY1_expected or ledY1 or ledy2_expected or ledy2 or s1_expected or s1 or s2_expected or s2 or s4_expected or s4 or s5_expected or s5 or s6_expected or s6 or SEG1_expected or SEG1 or SEG2_expected or SEG2 or SEG3_expected or SEG3 or SEG4_expected or SEG4 or SEG5_expected or SEG5 or SEG6_expected or SEG6 or SEG7_expected or SEG7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ledG1 = %b | expected ledg2 = %b | expected ledR1 = %b | expected ledr2 = %b | expected ledY1 = %b | expected ledy2 = %b | expected s1 = %b | expected s2 = %b | expected s4 = %b | expected s5 = %b | expected s6 = %b | expected SEG1 = %b | expected SEG2 = %b | expected SEG3 = %b | expected SEG4 = %b | expected SEG5 = %b | expected SEG6 = %b | expected SEG7 = %b | ",ledG1_expected_prev,ledg2_expected_prev,ledR1_expected_prev,ledr2_expected_prev,ledY1_expected_prev,ledy2_expected_prev,s1_expected_prev,s2_expected_prev,s4_expected_prev,s5_expected_prev,s6_expected_prev,SEG1_expected_prev,SEG2_expected_prev,SEG3_expected_prev,SEG4_expected_prev,SEG5_expected_prev,SEG6_expected_prev,SEG7_expected_prev);
	$display("| real ledG1 = %b | real ledg2 = %b | real ledR1 = %b | real ledr2 = %b | real ledY1 = %b | real ledy2 = %b | real s1 = %b | real s2 = %b | real s4 = %b | real s5 = %b | real s6 = %b | real SEG1 = %b | real SEG2 = %b | real SEG3 = %b | real SEG4 = %b | real SEG5 = %b | real SEG6 = %b | real SEG7 = %b | ",ledG1_prev,ledg2_prev,ledR1_prev,ledr2_prev,ledY1_prev,ledy2_prev,s1_prev,s2_prev,s4_prev,s5_prev,s6_prev,SEG1_prev,SEG2_prev,SEG3_prev,SEG4_prev,SEG5_prev,SEG6_prev,SEG7_prev);
`endif
	if (
		( ledG1_expected_prev !== 1'bx ) && ( ledG1_prev !== ledG1_expected_prev )
		&& ((ledG1_expected_prev !== last_ledG1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledG1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledG1_expected_prev);
		$display ("     Real value = %b", ledG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ledG1_exp = ledG1_expected_prev;
	end
	if (
		( ledg2_expected_prev !== 1'bx ) && ( ledg2_prev !== ledg2_expected_prev )
		&& ((ledg2_expected_prev !== last_ledg2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg2_expected_prev);
		$display ("     Real value = %b", ledg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledg2_exp = ledg2_expected_prev;
	end
	if (
		( ledR1_expected_prev !== 1'bx ) && ( ledR1_prev !== ledR1_expected_prev )
		&& ((ledR1_expected_prev !== last_ledR1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR1_expected_prev);
		$display ("     Real value = %b", ledR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledR1_exp = ledR1_expected_prev;
	end
	if (
		( ledr2_expected_prev !== 1'bx ) && ( ledr2_prev !== ledr2_expected_prev )
		&& ((ledr2_expected_prev !== last_ledr2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr2_expected_prev);
		$display ("     Real value = %b", ledr2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ledr2_exp = ledr2_expected_prev;
	end
	if (
		( ledY1_expected_prev !== 1'bx ) && ( ledY1_prev !== ledY1_expected_prev )
		&& ((ledY1_expected_prev !== last_ledY1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledY1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledY1_expected_prev);
		$display ("     Real value = %b", ledY1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ledY1_exp = ledY1_expected_prev;
	end
	if (
		( ledy2_expected_prev !== 1'bx ) && ( ledy2_prev !== ledy2_expected_prev )
		&& ((ledy2_expected_prev !== last_ledy2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledy2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledy2_expected_prev);
		$display ("     Real value = %b", ledy2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ledy2_exp = ledy2_expected_prev;
	end
	if (
		( s1_expected_prev !== 1'bx ) && ( s1_prev !== s1_expected_prev )
		&& ((s1_expected_prev !== last_s1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s1_exp = s1_expected_prev;
	end
	if (
		( s2_expected_prev !== 1'bx ) && ( s2_prev !== s2_expected_prev )
		&& ((s2_expected_prev !== last_s2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s2_exp = s2_expected_prev;
	end
	if (
		( s4_expected_prev !== 1'bx ) && ( s4_prev !== s4_expected_prev )
		&& ((s4_expected_prev !== last_s4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s4_expected_prev);
		$display ("     Real value = %b", s4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s4_exp = s4_expected_prev;
	end
	if (
		( s5_expected_prev !== 1'bx ) && ( s5_prev !== s5_expected_prev )
		&& ((s5_expected_prev !== last_s5_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s5_expected_prev);
		$display ("     Real value = %b", s5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_s5_exp = s5_expected_prev;
	end
	if (
		( s6_expected_prev !== 1'bx ) && ( s6_prev !== s6_expected_prev )
		&& ((s6_expected_prev !== last_s6_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s6_expected_prev);
		$display ("     Real value = %b", s6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_s6_exp = s6_expected_prev;
	end
	if (
		( SEG1_expected_prev !== 1'bx ) && ( SEG1_prev !== SEG1_expected_prev )
		&& ((SEG1_expected_prev !== last_SEG1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_SEG1_exp = SEG1_expected_prev;
	end
	if (
		( SEG2_expected_prev !== 1'bx ) && ( SEG2_prev !== SEG2_expected_prev )
		&& ((SEG2_expected_prev !== last_SEG2_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_SEG2_exp = SEG2_expected_prev;
	end
	if (
		( SEG3_expected_prev !== 1'bx ) && ( SEG3_prev !== SEG3_expected_prev )
		&& ((SEG3_expected_prev !== last_SEG3_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_SEG3_exp = SEG3_expected_prev;
	end
	if (
		( SEG4_expected_prev !== 1'bx ) && ( SEG4_prev !== SEG4_expected_prev )
		&& ((SEG4_expected_prev !== last_SEG4_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_SEG4_exp = SEG4_expected_prev;
	end
	if (
		( SEG5_expected_prev !== 1'bx ) && ( SEG5_prev !== SEG5_expected_prev )
		&& ((SEG5_expected_prev !== last_SEG5_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG5_expected_prev);
		$display ("     Real value = %b", SEG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_SEG5_exp = SEG5_expected_prev;
	end
	if (
		( SEG6_expected_prev !== 1'bx ) && ( SEG6_prev !== SEG6_expected_prev )
		&& ((SEG6_expected_prev !== last_SEG6_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG6_expected_prev);
		$display ("     Real value = %b", SEG6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_SEG6_exp = SEG6_expected_prev;
	end
	if (
		( SEG7_expected_prev !== 1'bx ) && ( SEG7_prev !== SEG7_expected_prev )
		&& ((SEG7_expected_prev !== last_SEG7_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG7_expected_prev);
		$display ("     Real value = %b", SEG7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SEG7_exp = SEG7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module text_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in;
// wires                                               
wire ledG1;
wire ledg2;
wire ledR1;
wire ledr2;
wire ledY1;
wire ledy2;
wire s1;
wire s2;
wire s4;
wire s5;
wire s6;
wire SEG1;
wire SEG2;
wire SEG3;
wire SEG4;
wire SEG5;
wire SEG6;
wire SEG7;

wire sampler;                             

// assign statements (if any)                          
text i1 (
// port map - connection between master ports and signals/registers   
	.clk_in(clk_in),
	.ledG1(ledG1),
	.ledg2(ledg2),
	.ledR1(ledR1),
	.ledr2(ledr2),
	.ledY1(ledY1),
	.ledy2(ledy2),
	.s1(s1),
	.s2(s2),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.SEG1(SEG1),
	.SEG2(SEG2),
	.SEG3(SEG3),
	.SEG4(SEG4),
	.SEG5(SEG5),
	.SEG6(SEG6),
	.SEG7(SEG7)
);

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #10000 1'b1;
	#10000;
end 

text_vlg_sample_tst tb_sample (
	.clk_in(clk_in),
	.sampler_tx(sampler)
);

text_vlg_check_tst tb_out(
	.ledG1(ledG1),
	.ledg2(ledg2),
	.ledR1(ledR1),
	.ledr2(ledr2),
	.ledY1(ledY1),
	.ledy2(ledy2),
	.s1(s1),
	.s2(s2),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.SEG1(SEG1),
	.SEG2(SEG2),
	.SEG3(SEG3),
	.SEG4(SEG4),
	.SEG5(SEG5),
	.SEG6(SEG6),
	.SEG7(SEG7),
	.sampler_rx(sampler)
);
endmodule

